#!/bin/bash

################################################################################
# ACE Site Builder
#   Provisions a new site in Acquia's hosting environments using Acquia Cloud
#   Drush commands.
################################################################################

################################################################################
# Main function that is called by this script
################################################################################

main() {
    # EDIT THIS ONLY : Customize the specific domain and setup variables here
    local main_domain="mysite.com"
    local drush_alias="@mysite.dev"
    local install_profile="minimal"
    local template_folder="site-template"

    #####################   DO NOT EDIT BELOW THIS LINE!   #####################

    # Capture the location of this script from the execution context.
    local -r script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    local -r drush_dir="${script_dir}/../drush"
    local -r docroot="${script_dir}/../docroot"

    # Confirm we are running this is the correct place
    if [ ! -d ${docroot} ]
    then
      echo "You must be running this script from a directory in your site's git repo, parallel to 'docroot'"
      exit
    fi

    # Solicit domain name from user input
    local ok=0
    local domain
    local db_name

    until ((${ok} == 1))
    do
        echo -n "Please enter the requested subdomain for ${main_domain}: "
        read domain

        domain=$( echo "${domain}" | tr '[:upper:]' '[:lower:]')

        if [[ ${domain} =~ ^(.+)(\.${main_domain})$ ]]
        then
            ok=1
            # Extract the subdomain prefix. It'll be used as the database name.
            db_name="${BASH_REMATCH[1]}"
        else
           echo "ERROR: Not a ${main_domain} subdomain."
           echo
        fi
    done

    # Read credentials from $home/.acquia/cloudapi.conf
    if [ -f ${HOME}/.acquia/cloudapi.conf ]
    then
      local email=`cat ${HOME}/.acquia/cloudapi.conf | php -r '$obj = json_decode(fgets(STDIN)); echo $obj->email;'`
      local key=`cat ${HOME}/.acquia/cloudapi.conf | php -r '$obj = json_decode(fgets(STDIN)); echo $obj->key;'`
    else
      echo "Could not find your api credentials at ${HOME}/.acquia/cloudapi.conf."
      echo "You can run 'drush ac-api-login' to retrieve them and create this file."
      exit
    fi

    # Determine is this should be a full dev/prod or dev only
    echo "Select full development and production (y) or production only (n)?"
    read full_environment

    cd "${docroot}"

    # Make sure repository is up to date
    # Pull from master repository
    git pull origin master

    if [[ "${full_environment}" = "y" ]]
    then
        local commit_message="Creating ${domain}, full enviroment (dev and stage/prod folders)"
        # Build full enviroment and create dev directory
        echo "Building Full Dev and Prod Enviroments"
        create_site_folder ${docroot} ${template_folder} ${db_name}
        create_site_folder ${docroot} ${template_folder} "dev.${db_name}"
        # Create a domain on acquia prod
        echo "Adding new domains to Acquia Cloud"
        drush ${drush_alias} ac-domain-add ${domain} --email=${email} --key=${key}
        drush ${drush_alias} ac-domain-add dev.${domain} --email=${email} --key=${key}
        # Create the databases
        echo "Adding new databases to Acquia Cloud"
        drush ${drush_alias} ac-database-add ${db_name} --email=${email} --key=${key}
        drush ${drush_alias} ac-database-add dev.${db_name} --email=${email} --key=${key}
    else
        local commit_message="Creating ${domain}, production only site"
        # Build prod environment only
        echo "Building Prod Only Enviroment"
        create_site_folder ${docroot} ${template_folder} ${db_name}
        # Create a domain on acquia prod
        echo "Adding new domain to Acquia Cloud"
        drush ${drush_alias} ac-domain-add ${domain} --email=${email} --key=${key}
        # Create the databases
        echo "Adding new database to Acquia Cloud"
        drush ${drush_alias} ac-database-add ${db_name} --email=${email} --key=${key}
    fi

    # Create a new drush alias file for this domain
    sed "s/DOMAIN/${db_name}/" "${drush_dir}/alias-template.php" >  "${drush_dir}/${db_name}.aliases.drushrc.php"
    git add  "${drush_dir}/${db_name}.aliases.drushrc.php"

    # Final commit
    git add "${docroot}/sites/sites.php"
    git commit -m ${commit_message}

    echo "Pushing to master repository"
    git push origin master

    echo
    echo "Done adding ${domain}."

    # Check to see if the database is ready
    echo "Waiting for the database to be ready..."
 #   while true
 #   do
 #     $err=$( drush --alias-path="${drush_dir}" "@${db_name}.dev" sql-connect 2>&1)
 #     if [[ ! ${err} =~ error* ]]
 #     then
 #       break
 #     fi
 #   done

 # exit;

    # Further test is necessary, or just a sleep
    sleep 30

    # Now we can install Drupal
    # TODO: option to copy db or do fresh install
    echo
    echo "Installing Drupal"
    drush --alias-path="${drush_dir}" "@${db_name}.dev" si ${install_profile} -y  # --email=${email} --key=${key}
}

################################################################################
# Helper function to create the site folder for each environment
################################################################################
create_site_folder() {
  local docroot=$1
  local template_folder=$2
  local db_name=$3
  # Copy our site template folder into a new directory using the domain's short name
  cp -R "${docroot}/sites/${template_folder}" "${docroot}/sites/${db_name}"
  # Change the database name in the include
  sed "s/REPLACE/${db_name}/" "${docroot}/sites/${template_folder}/settings.php" > "${docroot}/sites/${db_name}/settings.php"
  # We now need to add this to sites.php since we are mapping to a short name directory
  echo "\$sites['${domain}'] = '${db_name}';" >> "${docroot}/sites/sites.php"

  # Add new files to git
  git add -f "${docroot}/sites/${db_name}/settings.php"
  git add "${docroot}/sites/${db_name}/."
}

################################################################################
# When this bash script is run, the main command is automatically called
################################################################################
main "$@"
